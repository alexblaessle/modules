nextflow_process {

    name "Test Process CAT_CAT"
    script "modules/nf-core/cat/cat/main.nf"
    process "CAT_CAT"
    tag "module"
    tag "modules_nfcore"
    tag "cat_cat"

    test("test_cat_unzipped_unzipped") {
        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] =
                    [
                        [ id:'test', single_end:true ],
                        [
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['genome_sizes'], checkIfExists: true)
                        ]
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }


    test("test_cat_zipped_zipped") {
        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] =
                    [
                        [ id:'test', single_end:true ],
                        [
                            file(params.test_data['sarscov2']['genome']['genome_gff3_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['contigs_genome_maf_gz'], checkIfExists: true)
                        ]
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_zipped_unzipped") {
        config './nextflow_zipped_unzipped.config'

        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] =
                    [
                        [ id:'test', single_end:true ],
                        [
                            file(params.test_data['sarscov2']['genome']['genome_gff3_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['contigs_genome_maf_gz'], checkIfExists: true)
                        ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("test_cat_unzipped_zipped") {
        config './nextflow_unzipped_zipped.config'
        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] =
                    [
                        [ id:'test', single_end:true ],
                        [
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true),
                            file(params.test_data['sarscov2']['genome']['genome_sizes'], checkIfExists: true)
                        ]
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("test_cat_one_file_unzipped_zipped") {
        config './nextflow_unzipped_zipped.config'
        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] =
                    [
                        [ id:'test', single_end:true ],
                        [
                            file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                        ]
                    ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}

